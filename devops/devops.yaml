apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-pv
spec:
  capacity:
    storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  local:
    path: /var/local-vol0
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - minikube
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vol0-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-storage
  accessModes:
  - ReadWriteOnce
---
apiVersion: v1
kind: Service
metadata:
  name: docker-svc
  labels:
    role: devops
spec:
  clusterIP: None
  selector:
    run: docker
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: docker-ss
  labels:
    role: devops
spec:
  selector:
    matchLabels:
      run: docker
  serviceName: docker-ss
  replicas: 1
  template:
    metadata:
      name: docker
      labels:
        run: docker
        role: devops
    spec:
      # nodeName: minikube
      containers:
      - name: docker
        env:
          - name: DOCKER_HOST
            value: unix:///var/socket/docker.sock
        image: docker:dind
        securityContext:
          privileged: true
        volumeMounts:
          - name: vol0-pvc
            mountPath: /var/lib/docker
            subPath: docker
          - name: vol0-pvc
            mountPath: /var/socket
            subPath: socket
      volumes:
        - name: vol0-pvc
          persistentVolumeClaim:
            claimName: vol0-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: agent-svc
  labels:
    role: devops
spec:
  clusterIP: None
  selector:
    run: action-runner
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: internal-kubectl
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-role
rules:
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - get
      - list
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: podrole-agent-bind
subjects:
  - kind: ServiceAccount
    name: internal-kubectl
roleRef:
  kind: Role
  name: pod-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: agent-ss
  labels:
    run: action-runner
    role: devops
spec:
  selector:
    matchLabels:
      run: action-runner
  serviceName: agent-svc
  replicas: 1
  template:
    metadata:
      name: agent
      labels:
        run: action-runner
        role: devops
    spec:
      serviceAccountName: internal-kubectl
      # nodeName: minikube
      containers:
      - name: agent
        image: agent:v1
        imagePullPolicy: IfNotPresent
        env:
        - name: DOCKER_HOST
          value: unix:///var/socket/docker.sock
        - name: GIT_SSH_COMMAND
          value: 'ssh -i /etc/ssh_keys/ssh-github -o IdentitiesOnly=yes'
        volumeMounts:
        - name: vol0-pvc
          mountPath: /var/socket/
          subPath: socket
        - name: vol0-pvc
          mountPath: /var/_work/
          subPath: _work
        - name: ssh-volume
          readOnly: true
          mountPath: /etc/ssh_keys
      volumes:
      - name: vol0-pvc
        persistentVolumeClaim:
          claimName: vol0-pvc
      - name: ssh-volume
        secret:
          defaultMode: 292
          secretName: ssh-key-secret